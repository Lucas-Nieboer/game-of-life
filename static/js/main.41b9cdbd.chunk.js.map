{"version":3,"sources":["components/boxes.js","components/grid.js","components/buttons.js","index.js"],"names":["Box","selectBox","props","row","col","className","this","boxClass","id","boxID","onClick","React","Component","Grid","width","cols","rowsArr","i","rows","j","gridFull","push","key","style","backgroundColor","boxColor","Buttons","handleRenderSpeed","evt","gameSpeed","handleGridSize","gridSize","handleColorChange","setColor","hex","handleRandomColor","setState","setRandColorState","handleRandomColorRate","setRandColorSpeed","state","gsvalue","svalue","rrvalue","randomSpeed","ButtonToolbar","Button","variant","playButton","disabled","isPlaying","pauseButton","setSeed","clear","maxValue","minValue","value","onChange","onChangeComplete","color","initialBoxColor","htmlFor","checked","colorRandinit","onColor","onHandleColor","handleDiameter","uncheckedIcon","checkedIcon","boxShadow","activeBoxShadow","height","aria-label","Main","gridCopy","arrayClone","clearInterval","intervalId","setInterval","play","speed","playing","Math","floor","random","grid","Array","fill","map","generation","size","rspeed","newColor","tf","colorRand","rs","g","g2","count","newBoxColor","toString","class","href","target","rel","arr","JSON","parse","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.41b9cdbd.chunk.js","sourcesContent":["import React from 'react'\n\nclass Box extends React.Component {\n\n    selectBox = () => {\n        this.props.selectBox(this.props.row, this.props.col)\n    }\n\n    render() {\n\n        return(\n            <div\n                className = {this.props.boxClass}\n                id = {this.props.boxID}\n                onClick = {this.selectBox}\n            />\n        )\n    }\n\n}\n\nexport default Box","import React from 'react'\nimport Box from './boxes'\n\nclass Grid extends React.Component {\n\n    render() {\n        \n        const width = this.props.cols * 14\n        var rowsArr = []\n\n        var boxClass = \"\"\n\n        for (var i=0; i<this.props.rows; i++) {\n            for (var j=0; j<this.props.cols; j++) {\n                let boxID = i + \"_\" + j\n\n                boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\"\n\n                rowsArr.push(\n                    <Box\n                        boxClass = {boxClass}\n                        key = {boxID}\n                        boxID = {boxID}\n                        row = {i}\n                        col = {j}\n                        selectBox = {this.props.selectBox}\n                    />\n                )\n            }\n        }\n\n        return (\n            <div className=\"grid\" style={{width: width, backgroundColor:this.props.boxColor}}>\n                {rowsArr}\n            </div>\n        )\n    }\n}\n\nexport default Grid","import React from 'react'\nimport { ButtonToolbar, Button } from 'react-bootstrap'\nimport InputRange from 'react-input-range'\nimport { SliderPicker } from 'react-color'\nimport Switch from \"react-switch\"\n\nclass Buttons extends React.Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.state = { \n            gsvalue: 10,\n            svalue: 7,\n            rrvalue: this.props.randomSpeed\n        }\n    }\n\n    handleRenderSpeed = (evt) => {\n        this.props.gameSpeed(evt)\n    }\n\n    handleGridSize = (evt) => {\n        this.props.gridSize(evt)\n    }\n\n    handleColorChange = (evt) => {\n        this.props.setColor(evt.hex)\n    }\n\n    handleRandomColor = (evt) => {\n        this.setState({ evt })\n        this.props.setRandColorState(evt)\n    }\n\n    handleRandomColorRate = (evt) => {\n        this.props.setRandColorSpeed(evt)\n    }\n\n    render() {\n        return (\n            <div className=\"buttons\">\n                <div className=\"indicator\" />\n                <ButtonToolbar>\n                    <Button variant=\"light\" onClick = {this.props.playButton} disabled = {this.props.isPlaying}>\n                        Play\n                    </Button>\n                    <Button variant=\"light\" onClick = {this.props.pauseButton} disabled = {!this.props.isPlaying}>\n                        Pause\n                    </Button>\n                    <Button variant=\"light\" onClick = {this.props.setSeed}>\n                        Seed\n                    </Button>\n                    <Button variant=\"light\" onClick = {this.props.clear}>\n                        Clear\n                    </Button>\n                    <div className=\"drop-down-item\">\n                        <span>Speed</span>\n                        <InputRange\n                            maxValue={10}\n                            minValue={1}\n                            value={this.state.svalue}\n                            onChange={svalue => this.setState({ svalue })} \n                            onChangeComplete={svalue=>this.handleRenderSpeed(svalue)}\n                        />\n                    </div>\n                    <div className=\"drop-down-item\">\n                        <span>Grid Size</span>\n                        <InputRange\n                            maxValue={15}\n                            minValue={1}\n                            value={this.state.gsvalue}\n                            onChange={gsvalue => this.setState({ gsvalue })} \n                            onChangeComplete={gsvalue=>this.handleGridSize(gsvalue)}\n                        />\n                    </div>\n                    <div className=\"drop-down-item color-options\">\n                        <span>Color Options</span>\n                        <SliderPicker \n                            color={ this.props.initialBoxColor }\n                            onChangeComplete={ this.handleColorChange }\n                        />\n\n                        <span>Allow Random</span>\n                        <label htmlFor=\"material-switch\">\n                        <Switch\n                            checked={this.props.colorRandinit}\n                            onChange={this.handleRandomColor}\n                            onColor=\"#86d3ff\"\n                            onHandleColor=\"#2693e6\"\n                            handleDiameter={30}\n                            uncheckedIcon={false}\n                            checkedIcon={false}\n                            boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n                            activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n                            height={20}\n                            width={48}\n                            className=\"react-switch\"\n                            id=\"material-switch\"\n                            aria-label=\"Color Change\"\n                        />\n                        </label>\n                        <span>Random Rate</span>\n                        <InputRange\n                            maxValue={50}\n                            minValue={5}\n                            value={this.state.rrvalue}\n                            onChange={rrvalue => this.setState({ rrvalue })} \n                            onChangeComplete={rrvalue => this.handleRandomColorRate(rrvalue)}\n                        />\n                    </div>\n                </ButtonToolbar>\n            </div>\n        )\n    }\n\n}\n\nexport default Buttons","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'react-input-range/lib/css/index.css'\nimport Grid from './components/grid'\nimport Buttons from './components/buttons'\n\nclass Main extends React.Component {\n\n    constructor() {\n\n        super()\n        this.speed = 160\n        this.rows = 30\n        this.cols = 50\n\n        this.state = {\n            generation: 0,\n            gridFull: Array(this.rows).fill().map(() => Array(this.cols).fill(false)),\n            initialBoxColor: '#2E8B57',\n            boxColor: '',\n            colorRand: true,\n            playing: false,\n            randomSpeed: 50\n        }\n    }\n\n    selectBox = (row, col) => {\n\n        let gridCopy = arrayClone(this.state.gridFull)\n        gridCopy[row][col] = !gridCopy[row][col]\n\n        this.setState({\n            gridFull: gridCopy\n        })\n    }\n\n    playButton = () => {\n\n        clearInterval(this.intervalId)\n        this.intervalId = setInterval(this.play, this.speed)\n        \n        this.setState({\n            playing: true\n        })\n    }\n\n    pauseButton = () => {\n\n        clearInterval(this.intervalId)\n\n        this.setState({\n            playing: false\n        })\n    }\n\n    setSeed = () => {\n\n        let gridCopy = arrayClone(this.state.gridFull)\n\n        for (let i=0; i<this.rows; i++) {\n            for (let j=0; j<this.cols; j++) {\n                if (Math.floor(Math.random() * 5) === 1) {\n                    gridCopy[i][j] = true\n                }\n            }\n        }\n\n        this.setState({\n            gridFull: gridCopy\n        })\n\n    }\n\n    clear = () => {\n\n        var grid = Array(this.rows).fill().map(() => Array(this.cols).fill(false))\n        clearInterval(this.intervalId)\n        this.setState({\n            gridFull: grid,\n            generation: 0,\n            boxColor: this.state.initialBoxColor,\n            playing: false\n        })\n    }\n\n    gridSize = (size) => {\n\n        this.cols = size * 5\n        this.rows = size * 3\n\n        this.clear()\n    }\n\n    gameSpeed = (rspeed) => {\n\n        var speedArray = [0,10,9,8,7,6,5,4,3,2,1]\n\n        this.speed = speedArray[rspeed] * 40\n\n        if (this.state.playing) {\n            clearInterval(this.intervalId)\n            this.intervalId = setInterval(this.play, this.speed)\n        }\n    }\n\n    setColor = (newColor) => {\n\n        this.setState({\n            initialBoxColor: newColor,\n            boxColor: newColor\n        })\n    }\n\n    setRandColorState = (tf) => {\n\n        this.setState({\n            colorRand: tf\n        })\n    }\n\n    setRandColorSpeed = (rs) => {\n\n        this.setState({\n            randomSpeed: rs\n        })\n    }\n\n    play = () => {\n        \n        let g = this.state.gridFull\n        let g2 = arrayClone(this.state.gridFull)\n\n        for (let i=0; i<this.rows; i++) {\n            for (let j=0; j<this.cols; j++) {\n                \n                let count = 0\n\n                if (i > 0) {\n                    if (g[i-1][j]) {\n                        count++\n                    }\n                }\n                if (i>0 && j>0) {\n                    if(g[i-1][j-1]) {\n                        count++\n                    }\n                }\n                if (i>0 && j<this.cols-1) {\n                    if(g[i-1][j+1]) {\n                        count++\n                    }\n                }\n                if (j<this.cols-1) {\n                    if(g[i][j+1]) {\n                        count++\n                    }\n                }\n                if (j>0) {\n                    if(g[i][j-1]) {\n                        count++\n                    }\n                }\n                if (i<this.rows-1) {\n                    if(g[i+1][j]) {\n                        count++\n                    }\n                }\n                if (i<this.rows-1 && j>0) {\n                    if(g[i+1][j-1]) {\n                        count++\n                    }\n                }\n                if (i<this.rows-1 && this.cols - 1) {\n                    if(g[i+1][j+1]) {\n                        count++\n                    }\n                }\n                if (g[i][j] && (count<2 || count>3)) {\n                    g2[i][j] = false\n                }\n                if (!g[i][j] && count === 3) {\n                    g2[i][j] = true\n                }\n            }\n        }\n\n        if(this.state.generation % this.state.randomSpeed === 0 && this.state.generation !== 0 && this.state.colorRand) {\n            var newBoxColor = '#'+Math.floor(Math.random()*16777215).toString(16)\n\n            this.setState({\n                boxColor: newBoxColor\n            })\n        }\n\n        this.setState({\n            gridFull: g2,\n            generation: this.state.generation + 1\n        })\n    }\n\n    componentDidMount() {\n        this.setSeed()\n\n        this.setState({\n            boxColor: this.state.initialBoxColor\n        })\n    }\n\n    render() {\n        return (\n            <div class=\"game-container\">\n                <div className=\"header\">\n                    <h2>Conway's Game of Life</h2>\n                </div>\n                <Buttons\n                    playButton = {this.playButton}\n                    pauseButton = {this.pauseButton}\n                    clear = {this.clear}\n                    setColor = {this.setColor}\n                    gameSpeed = {this.gameSpeed}\n                    setSeed = {this.setSeed}\n                    gridSize = {this.gridSize}\n                    initialBoxColor = {this.state.initialBoxColor}\n                    colorRandinit = {this.state.colorRand}\n                    setRandColorState = {this.setRandColorState}\n                    isPlaying = {this.state.playing}\n                    randomSpeed = {this.state.randomSpeed}\n                    setRandColorSpeed = {this.setRandColorSpeed}\n                />\n                <div className=\"grid-holder\">\n                    <Grid\n                        gridFull = {this.state.gridFull}\n                        rows = {this.rows}\n                        cols = {this.cols}\n                        selectBox = {this.selectBox}\n                        generation = {this.state.generation}\n                        boxColor = {this.state.boxColor}\n                    />\n                </div>\n                <div className=\"header gen-counter\">\n                    <div>Generation: </div>\n                    <div>{this.state.generation}</div>\n                </div>\n                <div className=\"learn-more\">\n                    <p>\n                        <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\" rel=\"noopener noreferrer\">Learn More about Conway's Game of Life</a>\n                    </p>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction arrayClone(arr) {\n    return JSON.parse(JSON.stringify(arr))\n}\n\nReactDOM.render(<Main />, document.getElementById('root'))\n"],"sourceRoot":""}